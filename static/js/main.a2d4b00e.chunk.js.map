{"version":3,"sources":["components/Navigation.js","components/Content.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","href","className","Content","props","state","search","event","this","setState","target","value","preventDefault","replace","window","location","assign","src","onSubmit","handleSubmit","bind","type","onChange","handleChange","onClick","lucky","React","Component","Footer","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mUAmBeA,MAdf,WACI,OACI,6BACI,uBAAGC,KAAM,gDAAT,kCACA,uBAAGA,KAAM,iDAAT,oDACA,uBAAGA,KAAM,KAAK,kBAAC,IAAD,OACd,uBAAGC,UAAW,aAAcD,KAAM,8JAE9B,4BAAQC,UAAW,0BAAnB,qC,uFCkCDC,E,kDAxCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,OAAQ,IAHG,E,yDAMNC,GACTC,KAAKC,SAAS,CAACH,OAAQC,EAAMG,OAAOC,U,mCAE3BJ,GACTA,EAAMK,iBACN,IAAMN,EAASE,KAAKH,MAAMC,OAAOO,QAAQ,IAAI,KAC7CC,OAAOC,SAASC,OAAhB,sCAAsDV,M,8BAGtDQ,OAAOC,SAASC,OAAO,qC,+BAGvB,OACI,yBAAKd,UAAW,WACZ,yBAAKe,IAAK,uFACV,0BAAMC,SAAUV,KAAKW,aAAaC,KAAKZ,OACnC,2BAAOa,KAAM,OAAQV,MAAOH,KAAKH,MAAMC,OAAQgB,SAAUd,KAAKe,aAAaH,KAAKZ,QAChF,kBAAC,IAAD,CAAYgB,QAAShB,KAAKW,aAAaC,KAAKZ,MAAON,UAAW,eAC9D,kBAAC,IAAD,CAAcA,UAAW,aACzB,kBAAC,IAAD,CAASA,UAAW,gBAExB,yBAAKA,UAAW,2BACZ,4BAAQsB,QAAShB,KAAKW,aAAaC,KAAKZ,OAAxC,gDACA,4BAAQgB,QAAShB,KAAKiB,MAAML,KAAKZ,OAAjC,mEAEJ,yBAAKN,UAAW,4BACZ,yNAA6C,uBAAGD,KAAM,KAAT,WAA7C,IAAuE,uBAAGA,KAAM,KAAT,uE,GAjCrEyB,IAAMC,WC2CbC,G,6KA5CP,OACI,gCACI,yBAAK1B,UAAW,WACZ,gFAIJ,yBAAKA,UAAW,eACZ,6BACI,2BACI,uBAAGD,KAAM,+JAAT,+CAKJ,2BACI,uBAAGA,KAAM,wJAAT,kEAKJ,2BACI,uBAAGA,KAAM,8FAAT,qCAKJ,2BACI,uBAAGA,KAAM,sDAAT,+GAKR,6BACI,2BAAG,uBAAGA,KAAM,4CAAT,iHACH,2BAAG,uBAAGA,KAAM,0CAAT,+CACH,2BAAG,uBAAGA,KAAM,4CAAT,kE,GAtCNyB,IAAMC,YCaZE,MAVf,WACI,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCQC,QACW,cAA7BhB,OAAOC,SAASgB,UAEe,UAA7BjB,OAAOC,SAASgB,UAEhBjB,OAAOC,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2d4b00e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { AccessAlarm, ThreeDRotation } from '@material-ui/icons';\r\nimport GridOnIcon from '@material-ui/icons/GridOn';\r\nimport '../styles/navigation.css';\r\n\r\nfunction Navigation() {\r\n    return (\r\n        <nav>\r\n            <a href={'https://www.google.com/intl/ru/gmail/about/#'}>Почта</a>\r\n            <a href={'https://www.google.by/imghp?hl=ru&tab=wi&ogbl'}>Картинки</a>\r\n            <a href={'#'}><GridOnIcon /></a>\r\n            <a className={'gb_D gb_xc'} href={'https://accounts.google.com/signin/v2/identifier?hl=ru&passive=true&' +\r\n            'continue=https%3A%2F%2Fwww.google.com%2F&flowName=GlifWebSignIn&flowEntry=ServiceLogin'}>\r\n                <button className={'btn btn-primary btn-sm'}>Войти</button>\r\n            </a>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport '../styles/content.css';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport KeyboardIcon from '@material-ui/icons/Keyboard';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\n\r\nclass Content extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            search: ''\r\n        }\r\n    }\r\n    handleChange(event) {\r\n        this.setState({search: event.target.value});\r\n    }\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        const search = this.state.search.replace(\" \",\"+\");\r\n        window.location.assign(`https://google.com/search?q=${search}`);\r\n    }\r\n    lucky() {\r\n        window.location.assign('https://www.google.com/doodles/');\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={'content'}>\r\n                <img src={'https://www.google.com/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png'}/>\r\n                <form onSubmit={this.handleSubmit.bind(this)}>\r\n                    <input type={'text'} value={this.state.search} onChange={this.handleChange.bind(this)}/>\r\n                    <SearchIcon onClick={this.handleSubmit.bind(this)} className={'search-btn'}/>\r\n                    <KeyboardIcon className={'keyboard'}/>\r\n                    <MicIcon className={'microphone'}/>\r\n                </form>\r\n                <div className={'content__search-buttons'}>\r\n                    <button onClick={this.handleSubmit.bind(this)}>Поиск в Google</button>\r\n                    <button onClick={this.lucky.bind(this)}>Мне повезет!</button>\r\n                </div>\r\n                <div className={'content__google-services'}>\r\n                    <p>Сервисы Google доступны на разных языках: <a href={'#'}>English</a> <a href={'#'}>Беларуская</a></p>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Content;","import React from \"react\";\r\nimport '../styles/footer.css';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <div className={'country'}>\r\n                    <p>\r\n                        Беларусь\r\n                    </p>\r\n                </div>\r\n                <div className={'footer-info'}>\r\n                    <div>\r\n                        <p>\r\n                            <a href={'https://ads.google.com/intl/ru_by/home/?subid=ww-ww-et-g-awa-a-g_hpafoot1_1!o2&utm' +\r\n                        '_source=google.com&utm_medium=referral&utm_campaign=google_hpafooter&fg=1'}>\r\n                            Реклама\r\n                            </a>\r\n                        </p>\r\n                        <p>\r\n                            <a href={'https://www.google.com/services/?subid=ww-ww-et-g-awa-a-g_hpbfoot1_1!o2&utm_' +\r\n                        'source=google.com&utm_medium=referral&utm_campaign=google_hpbfooter&fg=1'}>\r\n                            Для бизнеса\r\n                            </a>\r\n                        </p>\r\n                        <p>\r\n                            <a href={'https://about.google/?utm_source=google-BY&utm_medium=referral&utm_' +\r\n                        'campaign=hp-footer&fg=1'}>\r\n                                Всё о Google\r\n                            </a>\r\n                        </p>\r\n                        <p>\r\n                            <a href={'https://www.google.com/search/howsearchworks/?fg=1'}>\r\n                                Как работает Google Поиск\r\n                            </a>\r\n                        </p>\r\n                    </div>\r\n                    <div>\r\n                        <p><a href={'https://policies.google.com/privacy?fg=1'}>Конфиденциальность</a></p>\r\n                        <p><a href={'https://policies.google.com/terms?fg=1'}>Условия</a></p>\r\n                        <p><a href={'https://www.google.com/preferences?hl=ru'}>Настройки</a></p>\r\n                    </div>\r\n                </div>\r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\nimport './App.css';\nimport Navigation from \"./components/Navigation\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n    return (\n        <div>\n            <Navigation/>\n            <Content/>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}